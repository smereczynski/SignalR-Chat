@page "/login"
@model Chat.Web.Pages.LoginModel
@inject Microsoft.Extensions.Localization.IStringLocalizer<Chat.Web.Resources.SharedResources> Localizer

<div class="container py-5">
  <div class="row justify-content-center">
    <div class="col-sm-10 col-md-7 col-lg-5">
      <div class="card shadow-sm">
        <div class="card-body">
          <div class="d-flex justify-content-between align-items-center mb-3">
            <h5 class="card-title mb-0">@Localizer["SignIn"]</h5>
            <button type="button" id="btn-language-login" class="btn btn-sm btn-outline-secondary" title="@Localizer["ChangeLanguage"]" data-bs-toggle="modal" data-bs-target="#languageModal">
              <span id="currentLanguageFlag" class="flag-icon">🌐</span>
            </button>
          </div>
          <div id="otpContainer" data-otp-timeout-ms="8000" data-otp-retry-cooldown-ms="5000" data-otp-resend-delay-ms="60000">
            <div id="otp-step1">
              <div class="mb-2">
                <label for="otpUserName" class="form-label">@Localizer["User"]</label>
                <select class="form-select" id="otpUserName">
                  <option value="" selected disabled>@Localizer["LoadingUsers"]</option>
                </select>
                <div class="form-text">@Localizer["PickUserForOtp"]</div>
              </div>
              <button type="button" class="btn btn-primary" id="btn-send-otp">@Localizer["SendCode"]</button>
            </div>

            <div id="otp-step2" class="d-none">
              <div class="mb-2">
                <label for="otpCode" class="form-label">@Localizer["Code"]</label>
                <input type="text" class="form-control" id="otpCode" placeholder="@Localizer["SixDigitCode"]" />
                <div class="form-text">
                  @Localizer["CodeExpires"] <button type="button" id="btn-resend-otp" class="btn btn-link p-0 align-baseline" disabled>@Localizer["Resend"]</button>
                </div>
              </div>
              <button type="button" class="btn btn-primary" id="btn-verify-otp">@Localizer["Verify"]</button>
            </div>

            <div id="otpSendingIndicator" class="mt-2 small d-none fade-soft">
              <div data-state="sending" class="d-flex align-items-center">
                <div class="spinner-border spinner-border-sm me-2" role="status"><span class="visually-hidden">@Localizer["SendingCode"]</span></div>
                <span>@Localizer["SendingCode"] (<span id="otpSendCountdown">0</span>s)...</span>
              </div>
              <div data-state="success" class="d-flex align-items-center text-success d-none">
                <span class="me-2">✔</span>
                <span>@Localizer["SentToEmailAndMobile"]</span>
              </div>
              <div data-state="error" class="d-flex align-items-center text-danger d-none">
                <span class="me-2">⚠</span>
                <span class="me-2">@Localizer["FailedToSend"]</span>
                <a href="#" id="otpRetryLink" class="disabled-link" data-cooldown-left="0">@Localizer["Retry"]</a>
                <span class="ms-2 text-muted small" id="otpRetryCountdown"></span>
              </div>
            </div>

            <div class="text-danger mt-2 d-none" id="otpError"></div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Language Selection Modal -->
<div class="modal fade" id="languageModal" tabindex="-1" aria-labelledby="languageModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="languageModalLabel">@Localizer["SelectLanguage"]</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="list-group language-list">
                    <button type="button" class="list-group-item list-group-item-action" data-culture="en" data-flag="🇬🇧">
                        <span class="flag-icon me-2">🇬🇧</span> English
                    </button>
                    <button type="button" class="list-group-item list-group-item-action" data-culture="pl-PL" data-flag="🇵🇱">
                        <span class="flag-icon me-2">🇵🇱</span> Polski
                    </button>
                    <button type="button" class="list-group-item list-group-item-action" data-culture="de-DE" data-flag="🇩🇪">
                        <span class="flag-icon me-2">🇩🇪</span> Deutsch
                    </button>
                    <button type="button" class="list-group-item list-group-item-action" data-culture="cs-CZ" data-flag="🇨🇿">
                        <span class="flag-icon me-2">🇨🇿</span> Čeština
                    </button>
                    <button type="button" class="list-group-item list-group-item-action" data-culture="sk-SK" data-flag="🇸🇰">
                        <span class="flag-icon me-2">🇸🇰</span> Slovenčina
                    </button>
                    <button type="button" class="list-group-item list-group-item-action" data-culture="uk-UA" data-flag="🇺🇦">
                        <span class="flag-icon me-2">🇺🇦</span> Українська
                    </button>
                    <button type="button" class="list-group-item list-group-item-action" data-culture="be-BY" data-flag="🇧🇾">
                        <span class="flag-icon me-2">🇧🇾</span> Беларуская
                    </button>
                    <button type="button" class="list-group-item list-group-item-action" data-culture="lt-LT" data-flag="🇱🇹">
                        <span class="flag-icon me-2">🇱🇹</span> Lietuvių
                    </button>
                    <button type="button" class="list-group-item list-group-item-action" data-culture="ru-RU" data-flag="🇷🇺">
                        <span class="flag-icon me-2">🇷🇺</span> Русский
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
  <script src="~/lib/bootstrap/js/bootstrap.bundle.min.js"></script>
  <script>
    // Expose sanitized ReturnUrl to JS via server-rendering (server will still validate on verify)
    window.__returnUrl = (function(){
      try {
        var p = new URLSearchParams(window.location.search).get('ReturnUrl');
        if (typeof p === 'string' && p.startsWith('/') && !p.startsWith('//')) return p;
      } catch(_){}
      return '/chat';
    })();
    
    // Load localized strings for JavaScript (inline version for login page)
    (function(){
      window.i18n = {}; // Initialize immediately
      fetch('/api/localization/strings', { credentials: 'same-origin' })
        .then(r => r.ok ? r.json() : {})
        .then(strings => { 
          window.i18n = strings;
          document.dispatchEvent(new Event('i18n-loaded'));
        })
        .catch(() => { 
          // Fallback to English defaults if localization API fails
          window.i18n = {
            selectUser: 'Select user...',
            failedToLoadUsers: 'Failed to load users',
            userSelectionRequired: 'User selection is required',
            failedToSendCode: 'Failed to send code',
            errorSendingCode: 'Error sending code',
            userAndCodeRequired: 'User and code are required',
            invalidVerificationCode: 'Invalid verification code',
            verificationFailed: 'Verification failed. Please try again.',
            pleaseWaitSeconds: 'Please wait {0} seconds before resending',
            sendingCode: 'Sending code',
            sentToEmailAndMobile: 'Sent to email and mobile'
          };
        });
    })();
    
    // Language switching functionality for login page
    (function(){
      const languageModal = document.getElementById('languageModal');
      if (!languageModal) return;
      
      // Map of culture codes to flag emojis
      const cultureFlags = {
        'en': '🇬🇧',
        'pl-PL': '🇵🇱',
        'de-DE': '🇩🇪',
        'cs-CZ': '🇨🇿',
        'sk-SK': '🇸🇰',
        'uk-UA': '🇺🇦',
        'be-BY': '🇧🇾',
        'lt-LT': '🇱🇹',
        'ru-RU': '🇷🇺'
      };

      // Get current language from HTML lang attribute
      const currentLang = document.documentElement.lang || 'en';
      
      // Find matching culture based on language code
      let currentCulture = 'en';
      if (currentLang.length === 2) {
        const match = Object.keys(cultureFlags).find(c => c.toLowerCase().startsWith(currentLang.toLowerCase()));
        if (match) currentCulture = match;
      } else {
        currentCulture = currentLang;
      }

      // Set current language flag
      const currentFlagEl = document.getElementById('currentLanguageFlag');
      if (currentFlagEl && cultureFlags[currentCulture]) {
        currentFlagEl.textContent = cultureFlags[currentCulture];
      }

      // Mark current language as active in modal
      languageModal.addEventListener('show.bs.modal', function() {
        const buttons = languageModal.querySelectorAll('.language-list button');
        buttons.forEach(function(btn) {
          const culture = btn.getAttribute('data-culture');
          if (culture === currentCulture) {
            btn.classList.add('active');
          } else {
            btn.classList.remove('active');
          }
        });
      });

      // Handle language selection
      document.addEventListener('click', function(e) {
        const langBtn = e.target.closest('#languageModal .language-list button');
        if (langBtn) {
          const culture = langBtn.getAttribute('data-culture');
          
          if (culture && culture !== currentCulture) {
            // Create form and submit to change culture
            const form = document.createElement('form');
            form.method = 'POST';
            form.action = '/Culture/Set';
            
            const cultureInput = document.createElement('input');
            cultureInput.type = 'hidden';
            cultureInput.name = 'culture';
            cultureInput.value = culture;
            form.appendChild(cultureInput);
            
            const returnUrlInput = document.createElement('input');
            returnUrlInput.type = 'hidden';
            returnUrlInput.name = 'returnUrl';
            returnUrlInput.value = window.location.pathname + window.location.search;
            form.appendChild(returnUrlInput);
            
            document.body.appendChild(form);
            form.submit();
          }
        }
      });
    })();
  </script>
  <environment include="Development">
    <script src="~/js/login.js" asp-append-version="true"></script>
  </environment>
  <environment exclude="Development">
    <script src="~/js/dist/login.js" asp-append-version="true"></script>
  </environment>
}
